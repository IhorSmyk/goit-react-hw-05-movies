{"version":3,"file":"static/js/881.4e37dc5f.chunk.js","mappings":"+LACA,EAAuB,wBAAvB,EAAsD,wB,SCGzCA,EAAY,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACpBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,eAAIC,UAAWC,EAAf,SACGC,MAAMC,QAAQN,KAAd,OACCA,QADD,IACCA,OADD,EACCA,EAAWO,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC1B,OACE,SAAC,KAAD,CACEC,MAAO,CAAEC,KAAMX,GAEfE,UAAWC,EACXS,GAAE,kBAAaL,GAJjB,UAME,wBAAKC,GAAQC,KAJRF,EAOV,MAGR,C,qLCtBD,EAAuB,qBAAvB,EAAoD,sBAApD,EAAgF,oB,SCwDhF,MAhDA,WACE,OAA4BM,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SA6B/B,OA3BAC,EAAAA,EAAAA,YAAU,WACR,GAAI,OAACF,QAAD,IAACA,GAAAA,EAAOG,OAAZ,CACA,IAAMC,EAAW,mCAAG,WAAMJ,GAAN,uFAEhBN,GAAa,GAFG,UAGaW,EAAAA,EAAAA,IAAiBL,GAH9B,OAGVM,EAHU,OAIhBd,EAAUc,GAJM,gDAMhBV,EAAS,KAAIW,SANG,yBAQhBb,GAAa,GARG,4EAAH,sDAWjBU,EAAYJ,EAZc,CAa3B,GAAE,CAACA,KAEJE,EAAAA,EAAAA,YAAU,WACM,OAAVP,GACJa,EAAAA,OAAAA,QAAA,6BAAqCb,GACtC,GAAE,CAACA,KASF,iCACE,kBAAMc,SARW,SAAAC,GACnBA,EAAEC,iBACFZ,EAAgB,CAAEC,MAAOU,EAAEE,cAAcC,OAAOC,QAChDJ,EAAEK,OAAOC,OACV,EAIiCrC,UAAWC,EAAzC,WACE,kBAAOK,KAAK,SAASN,UAAWC,EAASqC,YAAY,eACrD,mBAAQC,KAAK,SAASvC,UAAWC,EAAjC,UACE,SAAC,MAAD,SAGHa,IAAa,SAAC0B,EAAA,EAAD,KACd,SAAC5C,EAAA,EAAD,CAAWC,UAAWe,MAG3B,C,yLClDK6B,E,QAAYC,EAAAA,OAAa,CAC7BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,QACVC,eAAe,KAINC,EAAS,mCAAG,sGACAP,EAAUnB,IAAI,wBADd,uBACf2B,EADe,EACfA,KADe,kBAEhBA,EAAKC,SAFW,2CAAH,qDAKTxB,EAAgB,mCAAG,WAAML,GAAN,yFACPoB,EAAUnB,IAAI,gBAAiB,CACpDsB,OAAQ,CAAEvB,MAAAA,KAFkB,uBACtB4B,EADsB,EACtBA,KADsB,kBAIvBA,EAAKC,SAJkB,2CAAH,sDAOhBC,EAAe,mCAAG,WAAM9C,GAAN,yFACNoC,EAAUnB,IAAV,iBAAwBjB,IADlB,uBACrB4C,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfG,EAAO,mCAAG,WAAM/C,GAAN,yFACEoC,EAAUnB,IAAV,iBAAwBjB,EAAxB,aADF,uBACb4C,EADa,EACbA,KADa,kBAEdA,EAAKI,MAFS,2CAAH,sDAKPC,EAAU,mCAAG,WAAMjD,GAAN,yFACDoC,EAAUnB,IAAV,iBAAwBjB,EAAxB,aADC,uBAChB4C,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.jsx","webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx","services/API.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieList_list__yjDCC\",\"item\":\"MovieList_item__tDivI\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport s from './MovieList.module.css';\n\nexport const MovieList = ({ movieList }) => {\n  const location = useLocation();\n  return (\n    <ul className={s.list}>\n      {Array.isArray(movieList) &&\n        movieList?.map(({ id, name, title }) => {\n          return (\n            <Link\n              state={{ from: location }}\n              key={id}\n              className={s.item}\n              to={`/movies/${id}`}\n            >\n              <h3>{name || title}</h3>\n            </Link>\n          );\n        })}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movieList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      name: PropTypes.string,\n      title: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Movies_form__4ow+Z\",\"input\":\"Movies_input__KrUqs\",\"btn\":\"Movies_btn__TlfBQ\"};","import { useEffect, useState } from 'react';\nimport { getMoviesByQuery } from 'services/API';\nimport { Notify } from 'notiflix';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { FaSearch } from 'react-icons/fa';\nimport s from './Movies.module.css';\n\nfunction Movies() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query?.trim()) return;\n    const fetchTrends = async query => {\n      try {\n        setIsLoading(true);\n        const receivedMovies = await getMoviesByQuery(query);\n        setMovies(receivedMovies);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTrends(query);\n  }, [query]);\n\n  useEffect(() => {\n    if (error === null) return;\n    Notify.failure(`some error occured ${error}`);\n  }, [error]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query: e.currentTarget.search.value });\n    e.target.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={s.form}>\n        <input name=\"search\" className={s.input} placeholder=\"search...\" />\n        <button type=\"submit\" className={s.btn}>\n          <FaSearch />\n        </button>\n      </form>\n      {isLoading && <Loader />}\n      <MovieList movieList={movies} />\n    </>\n  );\n}\n\nexport default Movies;\n","import axios from 'axios';\n\n// API_KEY: '8bd78ee11f1297c9482ff7b548a73f20',\n//  baseURL: 'https://api.themoviedb.org/3',\n\nconst moviesAPI = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '8bd78ee11f1297c9482ff7b548a73f20',\n    language: 'en-US',\n    include_adult: false,\n  },\n});\n\nexport const getTrends = async () => {\n  const { data } = await moviesAPI.get('/trending/movie/week');\n  return data.results;\n};\n\nexport const getMoviesByQuery = async query => {\n  const { data } = await moviesAPI.get('/search/movie', {\n    params: { query },\n  });\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await moviesAPI.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getCast = async id => {\n  const { data } = await moviesAPI.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await moviesAPI.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["MovieList","movieList","location","useLocation","className","s","Array","isArray","map","id","name","title","state","from","to","useState","movies","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","query","get","useEffect","trim","fetchTrends","getMoviesByQuery","receivedMovies","message","Notify","onSubmit","e","preventDefault","currentTarget","search","value","target","reset","placeholder","type","Loader","moviesAPI","axios","baseURL","params","api_key","language","include_adult","getTrends","data","results","getMovieDetails","getCast","cast","getReviews"],"sourceRoot":""}